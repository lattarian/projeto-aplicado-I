# -*- coding: utf-8 -*-
"""eda_inse_saeb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gESgLAEw5AsbqrZyTUtyzMMYf-pakzA7
"""

def is_outlier(col):
    """
    Verifica se os valores de uma coluna são outliers com base na média e 3 desvios padrão.

    Parâmetros:
    - col: pandas.Series ou coluna de um DataFrame.

    Retorna:
    - pandas.Series com valores booleanos indicando se o valor é um outlier.
    """
    # Calcula a média e o desvio padrão da coluna
    media = col.mean()  # Média dos valores da coluna
    desvio_padrao = col.std()  # Desvio padrão dos valores da coluna

    # Define os limites para outliers
    limite_superior = media + 3 * desvio_padrao  # Limite superior
    limite_inferior = media - 3 * desvio_padrao  # Limite inferior

    # Retorna uma série booleana indicando se cada valor é um outlier
    return (col > limite_superior) | (col < limite_inferior)

def describe_column(col):
    print("-"*80)
    print(f"Coluna: {col.name}")
    print(f"Número de exemplares: {col.count()}")
    print(f"Valor máximo: {col.max()}")
    print(f"Valor mínimo: {col.min()}")
    print(f"Variância: {col.var()}")
    print(f"Desvio padrão: {col.std()}")
    print(f"Distribuição:\n{col.describe()}")
    print(f"Quantidade de NAs: {col.isna().sum()}")
    outliers = is_outlier(col)
    print(f"Existência de outliers: {outliers.sum()}")

import matplotlib.pyplot as plt
import seaborn as sns

def boxplot_by_uf(df, col, by):
  print("")
  plt.figure(figsize=(12, 6))
  sns.boxplot(data=df, x=by, y=col.name, hue=by, palette='viridis', legend=False)
  plt.title(f'Distribuição {col.name} por ({by})')
  plt.ylabel(f'{col.name} (%)')
  plt.xticks(rotation=45)
  plt.tight_layout()
  plt.show()

"""## **Taxa de Desemphenho Escolar**"""

import pandas as pd
import numpy as np


df = pd.read_csv('saeb_data_2021.csv', delimiter=';', encoding='ISO-8859-1', dtype = {
    'NU_ANO_SAEB': 'str',
    'REGIAO': 'str',
    'CO_UF': 'str',
    'CO_MUNICIPIO': 'str',
    'NO_MUNICIPIO': 'str',
    'TP_LOCALIZACAO': 'str',
    'DP_ADIMINSTRATIVA': 'str',
    'APROVACAO_TOTAL_FUNDAMENTAL': 'float',
    'APROVACAO_ANOS_INICIAIS': 'float',
    'APROVACAO_ANOS_FINAIS': 'float',
    'APROVACAO_ANO_1': 'float',
    'APROVACAO_ANO_2': 'float',
    'APROVACAO_ANO_3': 'float',
    'APROVACAO_ANO_4': 'float',
    'APROVACAO_ANO_5': 'float',
    'APROVACAO_ANO_6': 'float',
    'APROVACAO_ANO_7': 'float',
    'APROVACAO_ANO_8': 'float',
    'APROVACAO_ANO_9': 'float',
    'APROVACAO_TOTAL_MEDIO': 'float',
    'APROVACAO_MEDIO_1': 'float',
    'APROVACAO_MEDIO_2': 'float',
    'APROVACAO_MEDIO_3': 'float',
    'REPROVACAO_TOTAL_FUNDAMENTAL': 'float',
    'REPROVACAO_ANOS_INICIAIS': 'float',
    'REPROVACAO_ANOS_FINAIS': 'float',
    'REPROCACAO_ANO_1': 'float',
    'REPROVACAO_ANO_2': 'float',
    'REPROVACAO_ANO_3': 'float',
    'REPROVACAO_ANO_4': 'float',
    'REPROVACAO_ANO_5': 'float',
    'REPROVACAO_ANO_6': 'float',
    'REPROVACAO_ANO_7': 'float',
    'REPROVACAO_ANO_8': 'float',
    'REPROVACAO_ANO_9': 'float',
    'REPROVACAO_TOTAL_MEDIO': 'float',
    'REPROVACAO_MEDIO_1': 'float',
    'REPROVACAO_MEDIO_2': 'float',
    'REPROVACAO_MEDIO_3': 'float',
    'ABANDONO_TOTAL_FUNDAMENTAL': 'float',
    'ABANDONO_ANOS_INICIAIS': 'float',
    'ABANDONO_ANOS_FINAIS': 'float',
    'ABANDONO_ANO_1': 'float',
    'ABANDONO_ANO_2': 'float',
    'ABANDONO_ANO_3': 'float',
    'ABANDONO_ANO_4': 'float',
    'ABANDONO_ANO_5': 'float',
    'ABANDONO_ANO_6': 'float',
    'ABANDONO_ANO_7': 'float',
    'ABANDONO_ANO_8': 'float',
    'ABANDONO_ANO_9': 'float',
    'ABANDONO_TOTAL_MEDIO': 'float',
    'ABANDONO_MEDIO_1': 'float',
    'ABANDONO_MEDIO_2': 'float',
    'ABANDONO_MEDIO_3': 'float'
})


for col in df.select_dtypes(include=[np.number]):
    describe_column(df[col])
    boxplot_by_uf(df, df[col], 'CO_UF')

"""# **Indicadores Econômicos**"""

import pandas as pd
import numpy as np


df = pd.read_csv('inse_data_2021.csv', delimiter=';', encoding='ISO-8859-1', dtype = {
    'NU_ANO_SAEB': 'str',
    'CO_UF': 'str',
    'SG_UF': 'str',
    'NO_UF': 'str',
    'CO_MUNICIPIO': 'str',
    'NO_MUNICIPIO': 'str',
    'TP_TIPO_REDE': 'str',
    'TP_LOCALIZACAO': 'str',
    'TP_CAPITAL': 'str',
    'QTD_ALUNOS_INSE': 'int',
    'MEDIA_INSE': 'float',
    'PC_NIVEL_1': 'float',
    'PC_NIVEL_2': 'float',
    'PC_NIVEL_3': 'float',
    'PC_NIVEL_4': 'float',
    'PC_NIVEL_5': 'float',
    'PC_NIVEL_6': 'float',
    'PC_NIVEL_7': 'float',
    'PC_NIVEL_8': 'float'
})

for col in df.select_dtypes(include=[np.number]):
    describe_column(df[col])
    boxplot_by_uf(df, df[col], 'SG_UF')